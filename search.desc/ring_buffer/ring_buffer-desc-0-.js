searchState.loadedDescShard("ring_buffer", 0, "Very simple ring buffer that can hold up to <code>CAP</code> items of …\nReturns a slice reference containing the contents of the …\nReturns a slice mutable slice reference containing the …\nReturns a slice containing the contents of the ring …\nReturns a mutable slice containing the contents of the …\nReturns a slice reference containing the back part of the …\nReturns a mutable slice reference containing the back part …\nRemoves all items from the ring buffer.\nEntry API.\nError types for the ring buffer.\nReturns the argument unchanged.\nReturns a slice reference containing the front part of the …\nReturns a mutable slice reference containing the front …\nReturns a reference to the item at the given index, or <code>None</code>…\nReturns a mutable reference to the item at the given …\nReturns a reference to the item at the given index without …\nReturns a mutable reference to the item at the given index …\nReturns <code>true</code> if the ring buffer has capacity for at least …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ring buffer is empty.\nIterators over the items in a ring buffer.\nReturns an iterator over the items in the ring buffer.\nReturns an iterator over the mutable references to the …\nReturns the number of items in the ring buffer.\nCreates a new empty ring buffer.\nRemoves the first item from the ring buffer and returns …\nAdds an item to the end of the ring buffer, removing the …\nAdds an item to the end of the ring buffer.\nAdds an item to the end of the ring buffer, assuming the …\nReturns the number of items that can be added to the ring …\nSplits the ring buffer into two mutable slice references, …\nCopies the contents of the ring buffer into an array, if …\nCopies the contents of the ring buffer into a <code>Vec</code>.\nCopies the contents of the ring buffer into a <code>Vec</code>, using …\nTries to add an item to the end of the ring buffer, if the …\nTries to add an item to the end of the ring buffer, if the …\nIf the ring has remaining capacity, returns a <code>VacantEntry</code> …\nA vacant entry in a <code>RingBuffer</code> that can be used to push a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrites the given item into the ring buffer.\nError returned when trying to push to a full ring buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn iterator over references to the items in a ring buffer.\nAn iterator over mutable references to the items in a ring …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")